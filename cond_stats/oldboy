
"This line puts the vim program into action
runtime! debian.vim


set nocompatible               " be iMproved
filetype off                   " Required
" vundle needs filtype plugins off
" i turn it on later
set neocomplete_mode = 1
" set the runtime path for vundle
set rtp+=~/.vim/bundle/vundle/
" start vundle environment
call vundle#rc()

" YOUR LIST OF PLUGINS GOES HERE LIKE THIS:

" core plugins
Bundle 'gmarik/vundle'
Plugin "flazz/vim-colorschemes"
Bundle 'kien/ctrlp.vim'

" vim main Plugins
Plugin "airblade/vim-gitgutter"
Plugin "sjl/gundo.vim"
Plugin "bling/vim-airline"
Plugin "jlanzarotta/bufexplorer"
Plugin "vim-scripts/tComment"
Plugin "tpope/vim-surround"
Plugin "edsono/vim-matchit"
Plugin "henrik/vim-indexed-search"
Plugin "tpope/vim-abolish"
Plugin "tpope/vim-repeat"
Plugin "jiangmiao/auto-pairs"
Plugin "xolox/vim-session"
Plugin "xolox/vim-misc"
Plugin "editorconfig/editorconfig-vim" 
Plugin "godlygeek/tabular" 
Plugin "  Lokaltog/vim-easymotion"
Bundle 'tpope/vim-markdown'
Bundle 'ervandew/supertab'
Bundle 'scrooloose/syntastic'
Bundle 'joonty/vim-tork'
Bundle 'rking/ag.vim'
Bundle 'joonty/vim-sauce'
Bundle 'joonty/vim-taggatron'
Bundle 'tpope/vim-fugitive'

" rarely used
Bundle 'scrooloose/nerdtree'
Bundle 'bronson/vim-trailing-whitespace'
Plugin 'junegunn/vim-easy-align'
"Bundle 'SirVer/ultisnips'
"Bundle 'astrails/dotvim' 
  
 
    
" Language vundles
Bundle 'tpope/vim-rails'
Bundle "vim-ruby/vim-ruby"
Bundle "kana/vim-textobj-usr"
Bundle "tpope/vim-textobj-rubyblock"

Bundle "jnwhiteh/vim-golang"
Bundle "dgryski/vim-godef"
Bundle "nsf/gocode"
Bundle "Blackrush/vim-gocode"

Bundle 'joonty/vim-phpqa'
Bundle 'joonty/vim-phpunitqf' 
Bundle 'othree/html5.vim'  
Bundle 'joonty/vdebug.git'
Bundle 'kchmck/vim-coffee-script'

" databases
Bundle "krisajenkins/dbtext.vim"
Bundle "vim-scripts/SQLComplete.vim"
Bundle "vim-scripts/SQLUtilities"
Bundle "NagatoPain/AutoSQLUpperCase.vim"

" experimental vundles
Bundle "tpope/vinegar"
Bundle "rhysd/clever-f.vim"
Bundle "terryma/vim-multiple-cursors"
Bundle "gorodinskiy/vim-coloresque"
Bundle "maxbrunsfeld/vim-yankstack"
Bundle "justinmk/vim-sneak"

if neocomplete_mode == 1
   Bundle "Shougo/neocomplete"
   Bundle "Shougo/neosnippet"
   Bundle "honza/vim-snippets"
   Bundle "Shougo/echodoc.vim"
else
   Bundle "Valloric/YouCompleteMe"
   Bundle "MarcWeber/vim-addon-mw-utils"
   Bundle "tomtom/tlib_vim"
   Bundle "garbas/vim-snipmate"
   Bundle "honza/vim-snippets"
endif
call vundle#end()
" add plugins before this
let g:w = '<c-s>'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:easytags_syntax_keyword = 'always'
let g:easytags_file = '~/.vim/tags'
set vbs=1
"Vim nerd configurations 

au vimenter * NERDTree
autocmd StdinReadPre * let s:std_in = 1
autocmd vimenter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" Tree of nerd
nnoremap <C-N> :NERDTreeToggle<CR>
"nnoremap <C-S> :sav<CR>

"Vim Syntastic 
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_enable_signs=1
let g:syntastic_enable_balloons = 1
let g:syntastic_mode_map = { 'mode': 'active' }

"vim sauce

" now (after vundle finished) it is save to turn filetype plugins on
filetype plugin indent on
syntax on
runtime macros/matchit.vim
let g:EasyMotion_leader_key = '<Space>'
" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible
set number
"{{{ Settings
set ttyscroll=10
set hidden
set history=1000
set ruler
set tabstop=2
set clipboard=unnamed
set synmaxcol=128
set ignorecase
set smartcase
set title
set scrolloff=3
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set wrapscan
set cursorline
set visualbell
set encoding=utf-8
set t_Co=256
set noswapfile
set nobackup
set nowritebackup
" Folds
set foldmethod=marker
set wildmenu
set wildmode=list:longest,full
set mouse=a
set nohidden
set shortmess+=filmnrxoOt
set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set shell=bash\ --login
syntax on
let g:sauce_path = "~/.vimsauce"

"Spaces, not tabs
set shiftwidth=4
set expandtab

"Speed highlighting up
set nocursorcolumn
set nocursorline
syntax sync minlines=256

" Line numbers
"set relativenumber
"}}} 
"Fix whitespace
nnoremap <C-F> :FixWhitespace<CR>

"Fugitive (Git) in status line

set statusline=%{exists(\"*fugitive#statusline\")?\"branch:\ \".fugitive#statusline():\"\"}\ %F%m%r%h%w\ (%{&ff}){%Y}\ [%l,%v][%p%%]


" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark
set nocompatible
syntax enable
colorscheme darkZ

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

### END /etc/grub.d/10_linux ###

### BEGIN /etc/grub.d/20_linux_xen ###
### END /etc/grub.d/20_linux_xen ###

### BEGIN /etc/grub.d/30_os-prober ###
menuentry "Windows 8 (loader) (on /dev/sda1)" --class windows --class os {
	insmod part_msdos
	insmod ntfs
	set root='(hd0,msdos1)'
	search --no-floppy --fs-uuid --set=root 8814556B14555D6E
	drivemap -s (hd0) ${root}
	chainloader +1
}
### END /etc/grub.d/30_os-prober ###

### BEGIN /etc/grub.d/40_custom ###
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.
### END /etc/grub.d/40_custom ###

### BEGIN /etc/grub.d/41_custom ###
if [ -f  $prefix/custom.cfg ]; then
  source $prefix/custom.cfg;
fi
### END

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
//endif

